.grid-container {
    background-color: bisque;
    display: grid; /* setting display as grid does nothing unlike in flexbox where the default layout is row */
    /* a grid without defined colmns and rows is just a box so we have to define the columns and rows */
    
    /* we have used percentages but it is much more common to use a combination of fixed sizes (in em/rem) and fractions or ratio of the remaining space after the fixed size content have been defined. in other words, we have defined the width of our colums, fixed and flexible and grid is just taking our content and placing them in the other that it comes across them basically.*/
    /* grid-template-columns: 50% 20% 10% 10% 10%;  */
    grid-template-columns: 10rem 1fr 10rem; /*we have in mind to have 3 columns and 4 rows. ratio. this is a unit of measurement. fr means share of remaining space. a column won't get smaller than it needs to fill its contents. each value represents the column  width size and child elements are arranged how they have been defined but can be re-arranged later */
    grid-template-rows: 8vh 40vh 1fr 10vh; /*Not enough grid items to make it 4 rows though */
}   
.box {
    font-size: 2em;
    padding: 0.5rem;
    font-weight: 700;
    text-shadow: 2px 2px 10px #fff;  
}


/* This is where we started the project, by first defining the element with colors */
#one {
    /* (grid-column: 1 / 4;)  shorthand for grid-column start and end  */
    grid-column-start: 1;
    grid-column-end: 4;
    background-color: red;
}

#two {
    grid-row-start: 2;
    grid-row-end: 5;
    background-color: blue;

}

#three {
    grid-column: 3 / 4;
    background-color: green;
}

.main {
    grid-row: 2 / 5 ;
    display: flex;
    flex-direction: column;
    gap: 1em;
}
#four {
    /* grid-row: 2 / 3; */  /*did not look good treated as indirect child */
    height: 40vh; 
    background-color: yellow;
}

#five {
    /* grid-row: 3 / 5; */
    height: 50vh;
    background-color: purple;
}

#six {
    grid-column: 3 / 4;
    grid-row: 4 / 5;
    background-color: orange;
}

#seven {
    background-color: hotpink;
    grid-column: 1 / 4;
}